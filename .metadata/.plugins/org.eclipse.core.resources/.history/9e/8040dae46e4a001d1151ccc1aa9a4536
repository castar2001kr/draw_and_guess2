package game.managers;

import java.util.Queue;
import java.util.Random;

import game.repository.IDBoxRepository;
import game.repository.SearchNode;
import game.service.GameService;
import player.Player;

public class RoomManager {

	private int rid;
	private final IDBoxRepository<Player> repo;
	private static final int SIZE = 6;
	private final String title;
	private int HostPid;
	private GameService service = new GameService(this);
	public boolean cleared = false;

	
	public RoomManager(String title, int rid){ // make new room
			
		repo=new IDBoxRepository<Player>(SIZE);
		this.title=title;
		this.HostPid=0;
		this.rid=rid;
	}
	
	public void setRid(int rid) {
		this.rid = rid;
	}
	

	synchronized public int in(Player p) { 	
		
		int pid = repo.getId(p);
		
		if(pid<0||cleared) {
			return -1;
		}
		
		p.setPid(pid);
		p.setState(true); // 10.06
		p.setRoom(rid);
		
		repo.unlockInfo(pid, p.getName());
		return pid;
		
	}
	
	
	synchronized public int out(Player p) { //true => out trial proceed safely
	
		repo.returnId(p.getPid());
		
		if(p.getPid()==this.getHostPid()) {
			
			Queue<SearchNode> q = this.repo.getAll();

			int newHostPid = -1;
			int numberOfCandidates = q.size();
			Random rand = new Random();
			
			int cnt = rand.nextInt(numberOfCandidates);
			
			while(cnt>=0) {
				
				newHostPid = (int) q.poll().getId();
				cnt--;
			}
			
			if(newHostPid<0) {
				cleared = true;
				clearThisRoom();
				return 2;
			}else {
				hostChange(newHostPid);
				return 1;
			}
		}
			
		return 0;
	}
	
	synchronized public void clearThisRoom() {
		RoomListManager.deleteRoom(rid);
	}
	
	synchronized public void hostChange(int pid) {
		
		HostPid = pid;
	}
	
	public Queue<SearchNode> getPlayers() {
		
		return this.repo.getAll();
		
	}
	
	public Player getPlayer(int pid){
		
		return repo.getInfo(pid);
	}
	
	
	synchronized public int getHostPid() {
		
		return HostPid;
	}
	
	synchronized public void play() { 
		
		RoomListManager.lockRoom(rid);
		repo.lockInfo(HostPid);
	}
	
	synchronized public void stop() {
		
		RoomListManager.unlockRoom(rid);
		repo.unlockInfo(HostPid);
	}
	
	public void SendMsg(String msg, int pid) {
		
		service.socketSend(msg, pid);
	}
	
	
}
