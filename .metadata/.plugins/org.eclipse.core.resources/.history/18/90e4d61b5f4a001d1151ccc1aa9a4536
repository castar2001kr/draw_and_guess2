package game.MessageBroker;

import java.util.Queue;

import org.json.simple.JSONObject;

import game.managers.RoomManager;
import game.repository.SearchNode;

public class EnvChangedBroker {

	private final RoomManager room;
	
	EnvChangedBroker(RoomManager room) {

		this.room = room;
	}
	
	private String makeHostChangeMsg() {
		
		return MsgMaker.make(1, 7, -1, 0);
		
	}
	
	void sendHostChangeMsg() {
		
		send(makeHostChangeMsg());
	}
	
	
	private String makeEnterMsg(int pid) {
		
		return MsgMaker.make(1, 3, pid, 0);
	}
	
	void sendEnterMsg(int pid) {
		
		send(makeEnterMsg(pid));
	}
	
	private String makeExitMsg(int pid) {
		
		return MsgMaker.make(1, 5, pid, 0);
	}
	
	void sendExitMsg(int pid) {
		
		send(makeExitMsg(pid));
	}
	
	
	
	
	void send(String msg) {
		
		try {
			
		}
		
		Queue<SearchNode> players =  room.getPlayers();
		
		while(!players.isEmpty()) {
			room.getPlayer(players.poll().getId()).propMsg(msg);
		}
	}
	
}
